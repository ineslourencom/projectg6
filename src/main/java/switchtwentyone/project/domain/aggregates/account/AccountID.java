package switchtwentyone.project.domain.aggregates.account;

import switchtwentyone.project.domain.shared.ValueObject;
import javax.persistence.Embeddable;
import javax.persistence.Embedded;

/**
 * Uniquely identifies a particular cargo. Automatically generated by the application.
 */
@Embeddable
public class AccountID implements ValueObject<AccountID> {

    @Embedded
    private Email id;

    private AccountID(Email id) {
        this.id = id;
    }

    /**
     * Empty constructor for AccountID.
     * Required by @Embeddable annotation.
     */
    public AccountID(){}

    /**
     * Constructor for AccountID.
     *
     * @param id email used as identifier.
     */
    public static AccountID of(Email id) {
        if (id == null) {
            throw new IllegalArgumentException("ID is required");
        } else {
            return new AccountID(id);
        }
    }

        /**
         * Getter method.
         *
         * @return email used as this accounts id.
         */
        public Email getID() {
            return Email.of(this.id.getEmailData());
        }


        /**
         * This method verifies if a given email was used to create an accountID.
         *
         * @param email object inserted by parameter
         * @return true if email matches, false if otherwise
         */
        public boolean hasEmail (Email email){
            return this.id.sameValueAs(email);
        }


        /**
         * Override methods for AccountID.
         * Fall back to the sameValueAs method for equals evaluation because
         * it is a Value Object (all attributes must be equal).
         */
        @Override
        public boolean sameValueAs (AccountID other){
            return other != null && this.id.equals(other.id);
        }

        @Override
        public boolean equals (Object o){
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            AccountID other = (AccountID) o;

            return sameValueAs(other);
        }

        @Override
        public int hashCode () {
            return id.hashCode();
        }

        @Override
        public String toString () {
            return this.id.getEmailData();
        }

    }


