# US 6 - To update profiles

## 1. Requirements Engineering

### 1.1. User Story Description

As Administrator, I want to update profiles assigned to a user account.

### 1.2. Customer Specifications and Clarifications

**From the specifications document:**

> As administrator you have the control of change the profile assigned to a user account.

**From the client clarifications:**

n/a

### 1.3. Acceptance Criteria

**AC1** Only the admnistrator own the responsability of change the profile assigned to a user account.
**AC2** The user account can't have the profile filed empty or null.
**AC3** The admistrator has to find the user account using the email as a id account.

### 1.4. Found out Dependencies

* No dependencies were found.

### 1.5 Input and Output Data

**Input Data:**

* Typed data:
    *Email of the user account to be allocated the new Profile;
    *The new Profile to be assigned to user account. 

* Selected data:
    * ProfileType;
    * Email of user account.


**Output Data:**

* (In)Success of the operation

### 1.6. System Sequence Diagram (SSD)


![US006-SSD](US006_SSD.svg)


### 1.7 Other Relevant Remarks

* n/a


## 2. OO Analysis

### 2.1. Relevant Domain Model Excerpt

![US006-DM](US006-DM.svg)

### 2.2. Other Remarks

n/a

## 3. Design - User Story Realization

### 3.1. Rationale

### Systematization ##

According to the taken rationale, the conceptual classes promoted to software classes are:

* Account
* Profile

Other software classes (i.e. Pure Fabrication) identified:
* UpdateUserProfileUI
* UpdateUserProfileController
* ITCompany
* AccountStore
* ProfileStore

## 3.2. Sequence Diagram (SD)

![US006-SD](US006_SD.svg)


## 3.3. Class Diagram (CD)

![US006-CD](US006_CD.svg)

# 4. Tests

**Test 1** Find Profile By Profile Type

@Test
void findProfileByProfileType() {
//Arrange
ProfileStore store = new ProfileStore();
 
    assertEquals(pfOne,a);
    }

**Test 2**  Find Account By Email

@Test
void findAccountByEmailTest_Found_FirstMiddleLast_Stub() {

        //First
        assertEquals(expected1, result1);
        assertEquals(expected1.hashCode(), result1.hashCode());
        //Middle
        assertEquals(expected2, result2);
        assertEquals(expected2.hashCode(), result2.hashCode());
        //Last
        assertEquals(expected3, result3);
        assertEquals(expected3.hashCode(), result3.hashCode());
    }

**Test 3** Update Profile

@Test
void updateProfile() {

        assertTrue(result);
    }
 

# 6. Observations

n/a
